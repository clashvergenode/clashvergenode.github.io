<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashvergenode.github.io/news/article-51525.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>Java 常见的限流算法详细分析并实现_java</title>
        <meta name="description" content="目录  为什么要限流 限流算法 计数器限流 漏桶限流 令牌桶限流    为什么要限流 在保证可用的情况下尽可能多增加进入的人数,其余的人在排队等待,或者返回友好提示,保证里面的进行系统的用户可以正常使" />
        <link rel="icon" href="/assets/website/img/clashvergenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashVergeNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashvergenode.github.io/news/article-51525.htm" />
    <meta property="og:site_name" content="ClashVergeNode节点订阅站" />
    <meta property="og:title" content="Java 常见的限流算法详细分析并实现_java" />
    <meta property="og:image" content="https://clashvergenode.github.io/uploads/20240519/67466a9cff8b200e7800134d02f86132.webp" />
        <meta property="og:release_date" content="2025-02-05T08:20:06" />
    <meta property="og:updated_time" content="2025-02-05T08:20:06" />
        <meta property="og:description" content="目录  为什么要限流 限流算法 计数器限流 漏桶限流 令牌桶限流    为什么要限流 在保证可用的情况下尽可能多增加进入的人数,其余的人在排队等待,或者返回友好提示,保证里面的进行系统的用户可以正常使" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/main.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java 常见的限流算法详细分析并实现_java">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-TQG4M5VMSY"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-TQG4M5VMSY');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
<!-- ========================= preloader start ========================= -->
<div class="preloader">
    <div class="loader">
        <div class="spinner">
            <div class="spinner-container">
                <div class="spinner-rotator">
                    <div class="spinner-left">
                        <div class="spinner-circle"></div>
                    </div>
                    <div class="spinner-right">
                        <div class="spinner-circle"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- preloader end -->
<!-- ========================= header start ========================= -->
<header class="header">
    <div class="navbar-area">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-12">
                    <nav class="navbar navbar-expand-lg">
                        <a class="navbar-brand" href="/">
                                                    <span>Clash Verge Node</span>
                                                </a>
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="toggler-icon"></span>
                            <span class="toggler-icon"></span>
                            <span class="toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                            <ul id="nav" class="navbar-nav ms-auto">
                                                                <li class="nav-item">
                                    <a href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/client.htm">客户端</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/news/">新闻资讯</a>
                                </li>
                                                            </ul>
                        </div>
                        <!-- navbar collapse -->
                    </nav>
                    <!-- navbar -->
                </div>
            </div>
            <!-- row -->
        </div>
        <!-- container -->
    </div>
    <!-- navbar area -->
</header>
<!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="category" class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <div class="hero-content">
                        <h1 class="wow fadeInUp" data-wow-delay=".4s">
                            Java 常见的限流算法详细分析并实现_java                        </h1>
                        <p class="wow fadeInUp" data-wow-delay=".6s">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="hero-img wow fadeInUp" data-wow-delay=".5s">
                        <img src="/assets/website/img/clashvergenode/hero/hero-img.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= about-section start ========================= -->
    <section id="about" class="about-section pt-100">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">为什么要限流</a></li> <li><a href="#_label1" rel="nofollow">限流算法</a></li> <li><a href="#_label2" rel="nofollow">计数器限流</a></li> <li><a href="#_label3" rel="nofollow">漏桶限流</a></li> <li><a href="#_label4" rel="nofollow">令牌桶限流</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>为什么要限流</h2> <p>在保证可用的情况下尽可能多增加进入的人数,其余的人在排队等待,或者返回友好提示,保证里面的进行系统的用户可以正常使用，防止系统雪崩。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>限流算法</h2> <p>限流算法很多,常见的有三类,分别是 计数器算法 、漏桶算法、令牌桶算法 。</p> <p>（1）计数器：</p> <p>          在一段时间间隔内，处理请求的最大数量固定，超过部分不做处理。</p> <p>（2）漏桶：</p> <p>          漏桶大小固定，处理速度固定，但请求进入速度不固定（在突发情况请求过多时，会丢弃过多的请求）。</p> <p>（3）令牌桶：</p> <p>          令牌桶的大小固定，令牌的产生速度固定，但是消耗令牌（即请求）速度不固定（可以应对一些某些时间请求过多的情况）；每个请求都会从令牌桶中取出令牌，如果没有令牌则丢弃该次请求。</p> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>计数器限流</h2> <p>在一段时间间隔内，处理请求的最大数量固定，超过部分不做处理。</p> <p>举个例子,比如我们规定对于A接口，我们1分钟的访问次数不能超过100次。</p> <p>那么我们可以这么做：</p> <p>在一开 始的时候，我们可以设置一个计数器counter，每当一个请求过来的时候，counter就加1，如果counter的值大于100并且该请求与第一个请求的间隔时间还在1分钟之内，那么说明请求数过多,拒绝访问；</p> <p>如果该请求与第一个请求的间隔时间大于1分钟，且counter的值还在限流范围内，那么就重置 counter,就是这么简单粗暴。</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/0a487790d01b31449d834359aa43b765.jpg" alt="Java 常见的限流算法详细分析并实现_java"></p> <p>代码实现： </p> <div class="ay1code"> <pre class="brush:java;">  import java.util.concurrent.CountDownLatch;  import java.util.concurrent.ExecutorService;  import java.util.concurrent.Executors;  import java.util.concurrent.atomic.AtomicInteger;  import java.util.concurrent.atomic.AtomicLong;    //计数器 限流  public class CounterLimiter {        //起始时间      private static long startTime = System.currentTimeMillis();        //时间间隔1000ms      private static long interval = 1000;        //每个时间间隔内，限制数量      private static long limit = 3;        //累加器      private static AtomicLong accumulator = new AtomicLong();        /**       * true 代表放行，请求可已通过       * false 代表限制，不让请求通过       */      public static boolean tryAcquire() {          long nowTime = System.currentTimeMillis();          //判断是否在上一个时间间隔内          if (nowTime &lt; startTime + interval) {              //如果还在上个时间间隔内              long count = accumulator.incrementAndGet();              if (count &lt;= limit) {                  return true;              } else {                  return false;              }          } else {              //如果不在上一个时间间隔内              synchronized (CounterLimiter.class) {                  //防止重复初始化                  if (nowTime &gt; startTime + interval) {                      startTime = nowTime;                      accumulator.set(0);                  }              }              //再次进行判断              long count = accumulator.incrementAndGet();              if (count &lt;= limit) {                  return true;              } else {                  return false;              }          }      }          // 测试      public static void main(String[] args) {            //线程池，用于多线程模拟测试          ExecutorService pool = Executors.newFixedThreadPool(10);          // 被限制的次数          AtomicInteger limited = new AtomicInteger(0);          // 线程数          final int threads = 2;          // 每条线程的执行轮数          final int turns = 20;          // 同步器          CountDownLatch countDownLatch = new CountDownLatch(threads);          long start = System.currentTimeMillis();          for (int i = 0; i &lt; threads; i++) {              pool.submit(() -&gt;              {                  try {                        for (int j = 0; j &lt; turns; j++) {                            boolean flag = tryAcquire();                          if (!flag) {                              // 被限制的次数累积                              limited.getAndIncrement();                          }                          Thread.sleep(200);                      }                    } catch (Exception e) {                      e.printStackTrace();                  }                  //等待所有线程结束                  countDownLatch.countDown();              });          }          try {              countDownLatch.await();          } catch (InterruptedException e) {              e.printStackTrace();          }          float time = (System.currentTimeMillis() - start) / 1000F;          //输出统计结果          System.out.println("限制的次数为：" + limited.get() +                  ",通过的次数为：" + (threads * turns - limited.get()));          System.out.println("限制的比例为：" + (float) limited.get() / (float) (threads * turns));          System.out.println("运行的时长为：" + time + "s");      }    }    </pre> </div> <p>计数器限流的不足： </p> <p>这个算法虽然简单，但是存在临界问题，我们看下图：</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/37b6d8cb38f2a9870bc7e73a8114ff41.jpg" alt="Java 常见的限流算法详细分析并实现_java"></p> <p>从上图中我们可以看到，假设有一个恶意用户，他在0:59时，瞬间发送了100个请求，并且1:00又瞬间发送了100个请求，那么其实这个用户在 1秒里面，瞬间发送了200个请求。</p> <p>我们刚才规定的是1分钟最多100个请求（规划的吞吐量），也就是每秒钟最多1.7个请求，用户通过在时间窗口的重置节点处突发请求， 可以瞬间超过我们的速率限制。</p> <p>用户有可能通过算法的这个漏洞，瞬间压垮我们的应用。</p> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>漏桶限流</h2> <p>漏桶算法限流的基本原理为：水（对应请求）从进水口进入到漏桶里，漏桶以一定的速度出水（请求放行），当水流入速度过大，桶内的总水量大于桶容量会直接溢出，请求被拒绝。</p> <p>大致的漏桶限流规则如下：</p> <p>（1）进水口（对应客户端请求）以任意速率流入进入漏桶。</p> <p>（2）漏桶的容量是固定的，出水（放行）速率也是固定的。</p> <p>（3）漏桶容量是不变的，如果处理速度太慢，桶内水量会超出了桶的容量，则后面流入的水滴会溢出，表示请求拒绝。</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/9c68d254df89612d22658c5a1443e5c4.jpg" alt="Java 常见的限流算法详细分析并实现_java"></p> <p>⭐漏桶算法其实很简单，可以粗略的认为就是注水漏水过程，往桶中以任意速率流入水，以一定速率流出水，当水超过桶容量（capacity）则丢弃，因为桶容量是不变的，保证了整体的速率。</p> <p>以一定速率流出水，</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/37aacf26e3266ad0c64b88bb83c04842.jpg" alt="Java 常见的限流算法详细分析并实现_java"></p> <p>削峰： 有大量流量进入时,会发生溢出,从而限流保护服务可用</p> <p>缓冲： 不至于直接请求到服务器, 缓冲压力</p> <p>代码实现： </p> <div class="ay1code"> <pre class="brush:java;">  import java.util.concurrent.CountDownLatch;  import java.util.concurrent.ExecutorService;  import java.util.concurrent.Executors;  import java.util.concurrent.atomic.AtomicInteger;  import java.util.concurrent.atomic.AtomicLong;    //漏斗限流  public class LeakBucketLimiter {        //桶的大小      private static long capacity = 10;      //流出速率,每秒两个      private static long rate = 2;      //开始时间      private static long startTime = System.currentTimeMillis();      //桶中剩余的水      private static AtomicLong water = new AtomicLong();        /**       * true 代表放行，请求可已通过       * false 代表限制，不让请求通过       */      public synchronized static boolean tryAcquire() {          //如果桶的余量问0，直接放行          if (water.get() == 0) {              startTime = System.currentTimeMillis();              water.set(1);              return true;          }          //计算从当前时间到开始时间流出的水，和现在桶中剩余的水          //桶中剩余的水          water.set(water.get() - (System.currentTimeMillis() - startTime) / 1000 * rate);          //防止出现&lt;0的情况          water.set(Math.max(0, water.get()));          //设置新的开始时间          startTime += (System.currentTimeMillis() - startTime) / 1000 * 1000;          //如果当前水小于容量，表示可以放行          if (water.get() &lt; capacity) {              water.incrementAndGet();              return true;          } else {              return false;          }      }          // 测试      public static void main(String[] args) {            //线程池，用于多线程模拟测试          ExecutorService pool = Executors.newFixedThreadPool(10);          // 被限制的次数          AtomicInteger limited = new AtomicInteger(0);          // 线程数          final int threads = 2;          // 每条线程的执行轮数          final int turns = 20;          // 同步器          CountDownLatch countDownLatch = new CountDownLatch(threads);          long start = System.currentTimeMillis();          for (int i = 0; i &lt; threads; i++) {              pool.submit(() -&gt;              {                  try {                        for (int j = 0; j &lt; turns; j++) {                            boolean flag = tryAcquire();                          if (!flag) {                              // 被限制的次数累积                              limited.getAndIncrement();                          }                          Thread.sleep(200);                      }                    } catch (Exception e) {                      e.printStackTrace();                  }                  //等待所有线程结束                  countDownLatch.countDown();              });          }          try {              countDownLatch.await();          } catch (InterruptedException e) {              e.printStackTrace();          }          float time = (System.currentTimeMillis() - start) / 1000F;          //输出统计结果          System.out.println("限制的次数为：" + limited.get() +                  ",通过的次数为：" + (threads * turns - limited.get()));          System.out.println("限制的比例为：" + (float) limited.get() / (float) (threads * turns));          System.out.println("运行的时长为：" + time + "s");      }    }  </pre> </div> <p>漏桶的不足： </p> <p>漏桶的出水速度固定，也就是请求放行速度是固定的。</p> <p>漏桶出口的速度固定，不能灵活的应对后端能力提升。比如，通过动态扩容，后端流量从1000QPS提升到1WQPS，漏桶没有办法。</p> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>令牌桶限流</h2> <p>令牌桶算法中新请求到来时会从桶里拿走一个令牌，如果桶内没有令牌可拿，就拒绝服务。 当然，令牌的数量也是有上限的。令牌的数量与时间和发放速率强相关，时间流逝的时间越长，会不断往桶里加入越多的令牌，如果令牌发放的速度比申请速度快，令牌桶会放满令牌，直到令牌占满整个令牌桶。</p> <p>令牌桶限流大致的规则如下：</p> <p>（1）进水口按照某个速度，向桶中放入令牌。</p> <p>（2）令牌的容量是固定的，但是放行的速度不是固定的，只要桶中还有剩余令牌，一旦请求过来就能申请成功，然后放行。</p> <p>（3）如果令牌的发放速度，慢于请求到来速度，桶内就无牌可领，请求就会被拒绝。</p> <p>总之，令牌的发送速率可以设置，从而可以对突发的出口流量进行有效的应对。</p> <p style="text-align: center;"><img decoding="async" src="http://img.555519.xyz/uploads3/20220427/7ef06b69de97ce2f6c83443376f961bf.jpg" alt="Java 常见的限流算法详细分析并实现_java"></p> <p>代码实现： </p> <div class="ay1code"> <pre class="brush:java;">  import java.util.concurrent.CountDownLatch;  import java.util.concurrent.ExecutorService;  import java.util.concurrent.Executors;  import java.util.concurrent.atomic.AtomicInteger;  import java.util.concurrent.atomic.AtomicLong;    //令牌桶  public class TokenBucketLimiter {      //桶的容量      private static long capacity = 10;      //放入令牌的速率,每秒2个      private static long rate = 2;      //上次放置令牌的时间      private static long lastTime = System.currentTimeMillis();      //桶中令牌的余量      private static AtomicLong tokenNum = new AtomicLong();        /**       * true 代表放行，请求可已通过       * false 代表限制，不让请求通过       */      public synchronized static boolean tryAcquire() {          //更新桶中剩余令牌的数量          long now = System.currentTimeMillis();          tokenNum.addAndGet((now - lastTime) / 1000 * rate);          tokenNum.set(Math.min(capacity, tokenNum.get()));          //更新时间          lastTime += (now - lastTime) / 1000 * 1000;          //桶中还有令牌就放行          if (tokenNum.get() &gt; 0) {              tokenNum.decrementAndGet();              return true;          } else {              return false;          }      }          //测试      public static void main(String[] args) {            //线程池，用于多线程模拟测试          ExecutorService pool = Executors.newFixedThreadPool(10);          // 被限制的次数          AtomicInteger limited = new AtomicInteger(0);          // 线程数          final int threads = 2;          // 每条线程的执行轮数          final int turns = 20;          // 同步器          CountDownLatch countDownLatch = new CountDownLatch(threads);          long start = System.currentTimeMillis();          for (int i = 0; i &lt; threads; i++) {              pool.submit(() -&gt;              {                  try {                        for (int j = 0; j &lt; turns; j++) {                            boolean flag = tryAcquire();                          if (!flag) {                              // 被限制的次数累积                              limited.getAndIncrement();                          }                          Thread.sleep(200);                      }                    } catch (Exception e) {                      e.printStackTrace();                  }                  //等待所有线程结束                  countDownLatch.countDown();              });          }          try {              countDownLatch.await();          } catch (InterruptedException e) {              e.printStackTrace();          }          float time = (System.currentTimeMillis() - start) / 1000F;          //输出统计结果          System.out.println("限制的次数为：" + limited.get() +                  ",通过的次数为：" + (threads * turns - limited.get()));          System.out.println("限制的比例为：" + (float) limited.get() / (float) (threads * turns));          System.out.println("运行的时长为：" + time + "s");      }    }  </pre> </div> <p>令牌桶的好处： </p> <p>令牌桶的好处之一就是可以方便地应对 突发出口流量（后端能力的提升）。</p> <p>比如，可以改变令牌的发放速度，算法能按照新的发送速率调大令牌的发放数量，使得出口突发流量能被处理。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-50981.htm">猫咪驱虫应该用什么药（猫咪驱虫什么药最好）</a></p>
                                        <p>下一个：<a href="/news/article-51526.htm">宠物医院心得体会800字（宠物医院工作内容心得）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-38035.htm" title="广州的宠物领养机构排名榜（广州领养宠物中心）">广州的宠物领养机构排名榜（广州领养宠物中心）</a></li>
                        <li class="py-2"><a href="/news/article-62159.htm" title="动物诊疗许可申请表在哪里拿（动物诊疗许可申请表在哪里拿到）">动物诊疗许可申请表在哪里拿（动物诊疗许可申请表在哪里拿到）</a></li>
                        <li class="py-2"><a href="/news/article-64575.htm" title="动物疫苗 龙头 动物疫苗龙头股排名">动物疫苗 龙头 动物疫苗龙头股排名</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-clash-subscribe.htm" title="2月7日|最高速度22.2M/S，2025最新ClashVerge免费节点高速订阅链接">2月7日|最高速度22.2M/S，2025最新ClashVerge免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-35451.htm" title="Java之LocalDate,LocalTime，LocalDateTime等时间">Java之LocalDate,LocalTime，LocalDateTime等时间</a></li>
                        <li class="py-2"><a href="/news/article-45989.htm" title="宠物粮行业协会投诉电话是多少（宠物粮行业协会投诉电话是多少号码）">宠物粮行业协会投诉电话是多少（宠物粮行业协会投诉电话是多少号码）</a></li>
                        <li class="py-2"><a href="/news/article-35914.htm" title="厦门领养宠物猫中心地址 厦门领养宠物猫中心地址在哪里">厦门领养宠物猫中心地址 厦门领养宠物猫中心地址在哪里</a></li>
                        <li class="py-2"><a href="/news/article-57529.htm" title="怎样去除猫身上的跳蚤卵虫（怎么祛除猫身上的跳蚤）">怎样去除猫身上的跳蚤卵虫（怎么祛除猫身上的跳蚤）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-12-clash-node-daily-updates.htm" title="2月12日|最高速度22M/S，2025最新ClashVerge免费节点高速订阅链接">2月12日|最高速度22M/S，2025最新ClashVerge免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-42004.htm" title="SpringBoot整合 &#8211; 依赖以及配置文件">SpringBoot整合 &#8211; 依赖以及配置文件</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about-section end ========================= -->
        <!-- ========================= footer start ========================= -->
    <footer class="footer">
        <div class="container">
            <div class="copy-right">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    ClashVergeNode节点订阅站 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/clashvergenode/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/wow.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/polifill.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>