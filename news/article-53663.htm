<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashvergenode.github.io/news/article-53663.htm" />
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>初探webpack之编写loader_在线工具</title>
        <meta name="description" content="loader加载器是webpack的核心之一，其用于将不同类型的文件转换为webpack可识别的模块，即用于把模块原内容按照需求转换成新内容，用以加载非js模块，通过配合扩展插件，在webpack构建" />
        <link rel="icon" href="/assets/website/img/clashvergenode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="ClashVergeNode节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashvergenode.github.io/news/article-53663.htm" />
    <meta property="og:site_name" content="ClashVergeNode节点订阅站" />
    <meta property="og:title" content="初探webpack之编写loader_在线工具" />
    <meta property="og:image" content="https://clashvergenode.github.io/uploads/20240519/17aa8d74cc4931043ca77f2a2f98ce3c.webp" />
        <meta property="og:release_date" content="2025-02-09T10:05:00" />
    <meta property="og:updated_time" content="2025-02-09T10:05:00" />
        <meta property="og:description" content="loader加载器是webpack的核心之一，其用于将不同类型的文件转换为webpack可识别的模块，即用于把模块原内容按照需求转换成新内容，用以加载非js模块，通过配合扩展插件，在webpack构建" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Place favicon.ico in the root directory -->
    <!-- ========================= CSS here ========================= -->
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/bootstrap-5.0.0-beta2.min.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/LineIcons.2.0.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/tiny-slider.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/animate.css" />
    <link rel="stylesheet" href="/assets/website/css/clashvergenode/main.css" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="初探webpack之编写loader_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-TQG4M5VMSY"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-TQG4M5VMSY');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lte IE 9]>
      <p class="browserupgrade">
        You are using an <strong>outdated</strong> browser. Please
        <a href="https://browsehappy.com/">upgrade your browser</a> to improve
        your experience and security.
      </p>
    <![endif]-->
<!-- ========================= preloader start ========================= -->
<div class="preloader">
    <div class="loader">
        <div class="spinner">
            <div class="spinner-container">
                <div class="spinner-rotator">
                    <div class="spinner-left">
                        <div class="spinner-circle"></div>
                    </div>
                    <div class="spinner-right">
                        <div class="spinner-circle"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- preloader end -->
<!-- ========================= header start ========================= -->
<header class="header">
    <div class="navbar-area">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-12">
                    <nav class="navbar navbar-expand-lg">
                        <a class="navbar-brand" href="/">
                                                    <span>Clash Verge Node</span>
                                                </a>
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="toggler-icon"></span>
                            <span class="toggler-icon"></span>
                            <span class="toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse sub-menu-bar" id="navbarSupportedContent">
                            <ul id="nav" class="navbar-nav ms-auto">
                                                                <li class="nav-item">
                                    <a href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/client.htm">客户端</a>
                                </li>
                                                                <li class="nav-item">
                                    <a href="/news/">新闻资讯</a>
                                </li>
                                                            </ul>
                        </div>
                        <!-- navbar collapse -->
                    </nav>
                    <!-- navbar -->
                </div>
            </div>
            <!-- row -->
        </div>
        <!-- container -->
    </div>
    <!-- navbar area -->
</header>
<!-- ========================= header end ========================= -->
    <!-- ========================= hero-section start ========================= -->
    <section id="category" class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6">
                    <div class="hero-content">
                        <h1 class="wow fadeInUp" data-wow-delay=".4s">
                            初探webpack之编写loader_在线工具                        </h1>
                        <p class="wow fadeInUp" data-wow-delay=".6s">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="hero-img wow fadeInUp" data-wow-delay=".5s">
                        <img src="/assets/website/img/clashvergenode/hero/hero-img.svg" alt="">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- ========================= hero-section end ========================= -->
    <!-- ========================= about-section start ========================= -->
    <section id="about" class="about-section pt-100">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p><code>loader</code>加载器是<code>webpack</code>的核心之一，其用于将不同类型的文件转换为<code>webpack</code>可识别的模块，即用于把模块原内容按照需求转换成新内容，用以加载非<code>js</code>模块，通过配合扩展插件，在<code>webpack</code>构建流程中的特定时机注入扩展逻辑来改变构建结果，从而完成一次完整的构建。</p> <h2 id="描述">描述</h2> <p><code>webpack</code>是一个现代<code>JavaScript</code>应用程序的静态模块打包器<code>module bundler</code>，当<code>webpack</code>处理应用程序时，它会递归地构建一个依赖关系图<code>dependency graph</code>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个<code>bundle</code>。<br /> 使用<code>webpack</code>作为前端构建工具通常可以做到以下几个方面的事情:</p> <ul> <li>代码转换: <code>TypeScript</code>编译成<code>JavaScript</code>、<code>SCSS</code>编译成<code>CSS</code>等。</li> <li>文件优化: 压缩<code>JavaScript</code>、<code>CSS</code>、<code>HTML</code>代码，压缩合并图片等。</li> <li>代码分割: 提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li> <li>模块合并: 在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li> <li>自动刷新: 监听本地源代码的变化，自动重新构建、刷新浏览器页面，通常叫做模块热替换<code>HMR</code>。</li> <li>代码校验: 在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li> <li>自动发布: 更新完代码后，自动构建出线上发布代码并传输给发布系统。</li> </ul> <p>对于<code>webpack</code>来说，一切皆模块，而<code>webpack</code>仅能处理出<code>js</code>以及<code>json</code>文件，因此如果要使用其他类型的文件，都需要转换成<code>webpack</code>可识别的模块，即<code>js</code>或<code>json</code>模块。也就是说无论什么后缀的文件例如<code>png</code>、<code>txt</code>、<code>vue</code>文件等等，都需要当作<code>js</code>来使用，但是直接当作<code>js</code>来使用肯定是不行的，因为这些文件并不符合<code>js</code>的语法结构，所以就需需要<code>webpack loader</code>来处理，帮助我们将一个非<code>js</code>文件转换为<code>js</code>文件，例如<code>css-loader</code>、<code>ts-loader</code>、<code>file-loader</code>等等。</p> <p>在这里编写一个简单的<code>webpack loader</code>，设想一个简单的场景，在这里我们关注<code>vue2</code>，从实例出发，在平时我们构建<code>vue</code>项目时都是通过编写<code>.vue</code>文件来作为模块的，这种单文件组件的方式虽然比较清晰，但是如果一个组件比较复杂的话，就会导致整个文件相当大。当然<code>vue</code>中给我们提供了在<code>.vue</code>文件中引用<code>js</code>、<code>css</code>的方式，但是这样用起来毕竟还是稍显麻烦，所以我们可以通过编写一个<code>webpack loader</code>，在编写代码时将三部分即<code>html</code>、<code>js</code>、<code>css</code>进行分离，之后在<code>loader</code>中将其合并，再我们编写的<code>loader</code>完成处理之后再交与<code>vue-loader</code>去处理之后的事情。当然，关注点分离不等于文件类型分离，将一个单文件分成多个文件也只是对于代码编写过程中可读性的倾向问题，在这里我们重点关注的是编写一个简单的<code>loader</code>而不在于对于文件是否应该分离的探讨。文中涉及到的所有代码都在<code>https://github.com/WindrunnerMax/webpack-simple-environment</code>。</p> <h2 id="实现">实现</h2> <h3 id="搭建环境">搭建环境</h3> <p>在这里直接使用我之前的 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/WindrunnerMax/EveryDay/blob/master/Plugin/%E5%88%9D%E6%8E%A2webpack%E4%B9%8B%E6%90%AD%E5%BB%BAVue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md"  target="_blank"  rel="nofollow">初探webpack之从零搭建Vue开发环境</a> 中搭建的简单<code>vue + ts</code>开发环境，环境的相关的代码都在<code>https://github.com/WindrunnerMax/webpack-simple-environment</code>中的<code>webpack--vue-cli</code>分支中，我们直接将其<code>clone</code>并安装。</p> <pre><code>git clone https://github.com/WindrunnerMax/webpack-simple-environment.git git checkout webpack--vue-cli yarn install --registry https://registry.npm.taobao.org/ </code></pre> <p>之后便可以通过运行<code>yarn dev</code>来查看效果，在这里我们先打印一下此时的目录结构。</p> <pre><code>webpack--vue-cli ├── dist │   ├── static │   │   └── vue-large.b022422b.png │   ├── index.html │   ├── index.js │   └── index.js.LICENSE.txt ├── public │   └── index.html ├── src │   ├── common │   │   └── styles.scss │   ├── components │   │   ├── tab-a.vue │   │   └── tab-b.vue │   ├── router │   │   └── index.ts │   ├── static │   │   ├── vue-large.png │   │   └── vue.jpg │   ├── store │   │   └── index.ts │   ├── views │   │   └── framework.vue │   ├── App.vue │   ├── index.ts │   ├── main.ts │   ├── sfc.d.ts │   └── sum.ts ├── LICENSE ├── README.md ├── babel.config.js ├── package.json ├── tsconfig.json ├── webpack.config.js └── yarn.lock </code></pre> <h3 id="编写loader">编写loader</h3> <p>在编写<code>loader</code>之前，我们先关注一下上边目录结构中的<code>.vue</code>文件，因为此时我们需要将其拆分，但是如何将其拆分是需要考虑一下的，为了尽量不影响正常的使用，在这里采用了如下的方案。</p> <ul> <li>将<code>template</code>部分留在了<code>.vue</code>文件中，因为一些插件例如<code>Vetur</code>是会检查<code>template</code>中的一些语法，例如将其抽离出作为<code>html</code>文件，对于<code>@click</code>等语法<code>prettier</code>是会有<code>error</code>提醒的，而且如果不存在<code>.vue</code>文件的话，对于在<code>TS</code>中使用<code>declare module "*.vue"</code>也需要修改，所以本着最小影响的原则我们将<code>template</code>部分留在了<code>.vue</code>文件中，保存了<code>.vue</code>这个声明的文件。</li> <li>对于<code>script</code>部分，我们将其抽出，如果是使用<code>js</code>编写的，那么就将其命名为<code>.vue.js</code>，同样<code>ts</code>编写的就命名为<code>.vue.ts</code>。</li> <li>对于<code>style</code>部分，我们将其抽出，与<code>script</code>部分采用同样的方案，使用<code>css</code>、<code>scss</code>、<code>less</code>也分别命名为<code>.vue.css</code>、<code>.vue.scss</code>、<code>.vue.less</code>，而对于<code>scoped</code>我们通过注释的方式来实现。</li> </ul> <p>通过以上的修改，我们将文件目录再次打印出来，重点关注于<code>.vue</code>文件的分离。</p> <pre><code>webpack--loader ├── dist │   ├── static │   │   └── vue-large.b022422b.png │   ├── index.html │   ├── index.js │   └── index.js.LICENSE.txt ├── public │   └── index.html ├── src │   ├── common │   │   └── styles.scss │   ├── components │   │   ├── tab-a │   │   │   ├── tab-a.vue │   │   │   └── tab-a.vue.ts │   │   └── tab-b │   │       ├── tab-b.vue │   │       └── tab-b.vue.ts │   ├── router │   │   └── index.ts │   ├── static │   │   ├── vue-large.png │   │   └── vue.jpg │   ├── store │   │   └── index.ts │   ├── views │   │   └── framework │   │       ├── framework.vue │   │       ├── framework.vue.scss │   │       └── framework.vue.ts │   ├── App.vue │   ├── index.ts │   ├── main.ts │   ├── sfc.d.ts │   └── sum.ts ├── LICENSE ├── README.md ├── babel.config.js ├── package.json ├── tsconfig.json ├── vue-multiple-files-loader.js ├── webpack.config.js └── yarn.lock </code></pre> <p>现在我们开始正式编写这个<code>loader</code>了，首先需要简单说明一下<code>loader</code>的输入与输出以及常用的模块。</p> <ul> <li>简单来说<code>webpack loader</code>是一个从<code>string</code>到<code>string</code>的函数，输入的是字符串的代码，输出也是字符串的代码。</li> <li>通常来说对于各种文件的处理<code>loader</code>已经都有很好的轮子了，我们自己来编写的<code>loader</code>通常是用来做代码处理的，也就是说在<code>loader</code>中拿到<code>source</code>之后，我们将其转换为<code>AST</code>树，然后在这个<code>AST</code>上进行一些修改，之后再将其转换为字符串代码之后进行返回。</li> <li>从字符串到<code>AST</code>语法分析树是为了得到计算机容易识别的数据结构，在<code>webpack</code>中自带了一些工具，<code>acorn</code>是代码转<code>AST</code>的工具，<code>estraverse</code>是<code>AST</code>遍历工具，<code>escodegen</code>是转换<code>AST</code>到字符串代码的工具。</li> <li>既然<code>loader</code>是字符串到字符串的，那么在代码转换为<code>AST</code>处理之后需要转为字符串，然后再传递到下一个<code>loader</code>，下一个<code>loader</code>可能又要进行相同的转换，这样还是比较耗费时间的，所以可以通过<code>speed-measure-webpack-plugin</code>进行速率打点，以及<code>cache-loader</code>来存储<code>AST</code>。</li> <li> <code>loader-utils</code>是在<code>loader</code>中常用的辅助类，常用的有<code>urlToRequest</code>绝对路径转<code>webpack</code>请求的相对路径，<code>urlToRequest</code>来获取配置<code>loader</code>时传递的参数。</li> </ul> <p>由于我们在这里这个需求是用不到<code>AST</code>相关的处理的，所以还是比较简单的一个实例，首先我们需要写一个<code>loader</code>文件，然后配置在<code>webpack.config.js</code>中，在根目录我们建立一个<code>vue-multiple-files-loader.js</code>，然后在<code>webpack.config.js</code>的<code>module.rule</code>部分找到<code>test: /\.vue$/</code>，将这部分修改为如下配置。</p> <pre><code class="language-javascript">// ... {     test: /\.vue$/,     use: [         "vue-loader",         {             loader: "./vue-multiple-files-loader",             options: {                 // 匹配的文件拓展名                 style: ["scss", "css"],                 script: ["ts"],             },         },     ], } // ... </code></pre> <p>首先可以看到在<code>"vue-loader"</code>之后我们编写了一个对象，这个对象的<code>loader</code>参数是一个字符串，这个字符串是将来要被传递到<code>require</code>当中的，也就是说在<code>webpack</code>中他会自动帮我们把这个模块<code>require</code>即<code>require("./vue-multiple-files-loader")</code>。<code>webpack loader</code>是有优先级的，在这里我们的目标是首先经由<code>vue-multiple-files-loader</code>这个<code>loader</code>将代码处理之后再交与<code>vue-loader</code>进行处理，所以我们要将<code>vue-multiple-files-loader</code>写在<code>vue-loader</code>后边，这样就会首先使用<code>vue-multiple-files-loader</code>代码了。我们通过<code>options</code>这个对象传递参数，这个参数可以在<code>loader</code>中拿到。<br /> 关于<code>webpack loader</code>的优先级，首先定义<code>loader</code>配置的时候，除了<code>loader</code>与<code>options</code>选项，还有一个<code>enforce</code>选项，其可接受的参数分别是<code>pre: </code>前置<code>loader</code>、<code>normal: </code>普通<code>loader</code>、<code>inline: </code>内联<code>loader</code>、<code>post: </code>后置<code>loader</code>，其优先级也是<code>pre &gt; normal &gt; inline &gt; post</code>，那么相同优先级的<code>loader</code>就是从右到左、从下到上，从上到下很好理解，至于从右到左，只是<code>webpack</code>选择了<code>compose</code>方式，而不是<code>pipe</code>的方式而已，在技术上实现从左往右也不会有难度，就是函数式编程中的两种组合方式而已。此外，我们在<code>require</code>的时候还可以跳过某些<code>loader</code>，<code>!</code>跳过<code>normal loader</code>、<code>-!</code>跳过<code>pre</code>和<code>normal loader</code>、<code>!!</code>跳过<code>pre normal</code>和<code>post loader</code>，比如<code>require("!!raw!./script.coffee")</code>，关于<code>loader</code>的跳过，<code>webpack</code>官方的建议是，除非从另一个<code>loader</code>处理生成的，一般不建议主动使用。</p> <p>现在我们已经处理好<code>vue-multiple-files-loader.js</code>这个文件的创建以及<code>loader</code>的引用了，那么我们可以通过他来编写代码了，通常来说，<code>loader</code>一般是比较耗时的应用，所以我们通过异步来处理这个<code>loader</code>，通过<code>this.async</code>告诉<code>loader-runner</code>这个<code>loader</code>将会异步地回调，当我们处理完成之后，使用其返回值将处理后的字符串代码作为参数执行即可。</p> <pre><code class="language-javascript">module.exports = async function (source) {     const done = this.async();     // do something     done(null, source); } </code></pre> <p>对于文件的操作，我们使用<code>promisify</code>来处理，以便我们能够更好地使用<code>async/await</code>。</p> <pre><code class="language-javascript">const fs = require("fs"); const { promisify } = require("util");  const readDir = promisify(fs.readdir); const readFile = promisify(fs.readFile); </code></pre> <p>下面我们回到上边的需求上来，思路很简单，首先我们在这个<code>loader</code>中仅会收到以<code>.vue</code>结尾的文件，这是在<code>webpack.config.js</code>中配置的，所以我们在这里仅关注<code>.vue</code>文件，那么在这个文件下，我们需要获取这个文件所在的目录，然后将其遍历，通过<code>webpack.config.js</code>中配置的<code>options</code>来构建正则表达式去匹配同级目录下的<code>script</code>与<code>style</code>的相关文件，对于匹配成功的文件我们将其读取然后按照<code>.vue</code>文件的规则拼接到<code>source</code>中，然后将其返回之后将代码交与<code>vue-loader</code>处理即可。<br /> 那么我们首先处理一下当前目录，以及当前处理的文件名，还有正则表达式的构建，在这里我们传递了<code>scss</code>、<code>css</code>和<code>ts</code>，那么对于<code>App.vue</code>这个文件来说，将会构建<code>/App\.vue\.css$|App\.vue\.scss$/</code>和<code>App\.vue\.ts$</code>这两个正则表达式。</p> <pre><code class="language-javascript">const filePath = this.context; const fileName = this.resourcePath.replace(filePath + "/", "");  const options = loaderUtils.getOptions(this) || {}; const styleRegExp = new RegExp(options.style.map(it =&gt; `${fileName}\\.${it}$`).join("|")); const scriptRegExp = new RegExp(options.script.map(it =&gt; `${fileName}\\.${it}$`).join("|")); </code></pre> <p>之后我们通过遍历目录的方式，来匹配符合要求的<code>script</code>和<code>style</code>的文件路径。</p> <pre><code class="language-javascript">let stylePath = null; let scriptPath = null;  const files = await readDir(filePath); files.forEach(file =&gt; {     if (styleRegExp.test(file)) stylePath = path.join(filePath, file);     if (scriptRegExp.test(file)) scriptPath = path.join(filePath, file); }); </code></pre> <p>之后对于<code>script</code>部分，存在匹配节点且原<code>.vue</code>文件不存在<code>script</code>标签，则异步读取文件之后将代码进行拼接，如果拓展名不为<code>js</code>的话，例如是<code>ts</code>编写的那么就会将其作为<code>lang="ts"</code>去处理，之后将其拼接到<code>source</code>这个字符串中。</p> <pre><code class="language-javascript">if (scriptPath &amp;&amp; !/&lt;script[\s\S]*?&gt;/.test(source)) {     const extName = scriptPath.split(".").pop();     if (extName) {         const content = await readFile(scriptPath, "utf8");         const scriptTagContent = [             "&lt;script ",             extName === "js" ? "" : `lang="${extName}" `,             "&gt;\n",             content,             "&lt;/script&gt;",         ].join("");         source = source + "\n" + scriptTagContent;     } } </code></pre> <p>之后对于<code>style</code>部分，存在匹配节点且原<code>.vue</code>文件不存在<code>style</code>标签，则异步读取文件之后将代码进行拼接，如果拓展名不为<code>css</code>的话，例如是<code>scss</code>编写的那么就会将其作为<code>lang="scss"</code>去处理，如果代码中存在单行的<code>// scoped</code>字样的话，就会将这个<code>style</code>部分作<code>scoped</code>处理，之后将其拼接到<code>source</code>这个字符串中。</p> <pre><code class="language-javascript">if (stylePath &amp;&amp; !/&lt;style[\s\S]*?&gt;/.test(source)) {     const extName = stylePath.split(".").pop();     if (extName) {         const content = await readFile(stylePath, "utf8");         const scoped = /\/\/[\s]scoped[\n]/.test(content) ? true : false;         const styleTagContent = [             "&lt;style ",             extName === "css" ? "" : `lang="${extName}" `,             scoped ? "scoped " : " ",             "&gt;\n",             content,             "&lt;/style&gt;",         ].join("");         source = source + "\n" + styleTagContent;     } } </code></pre> <p>在之后使用<code>done(null, source)</code>触发回调完成<code>loader</code>的流程，相关代码如下所示，完整代码在<code>https://github.com/WindrunnerMax/webpack-simple-environment</code>中的<code>webpack--loader</code>分支当中。</p> <pre><code class="language-javascript">const fs = require("fs"); const path = require("path"); const { promisify } = require("util"); const loaderUtils = require("loader-utils");  const readDir = promisify(fs.readdir); const readFile = promisify(fs.readFile);  module.exports = async function (source) {     const done = this.async();     const filePath = this.context;     const fileName = this.resourcePath.replace(filePath + "/", "");      const options = loaderUtils.getOptions(this) || {};     const styleRegExp = new RegExp(options.style.map(it =&gt; `${fileName}\\.${it}$`).join("|"));     const scriptRegExp = new RegExp(options.script.map(it =&gt; `${fileName}\\.${it}$`).join("|"));      let stylePath = null;     let scriptPath = null;      const files = await readDir(filePath);     files.forEach(file =&gt; {         if (styleRegExp.test(file)) stylePath = path.join(filePath, file);         if (scriptRegExp.test(file)) scriptPath = path.join(filePath, file);     });      // 存在匹配节点且原`.vue`文件不存在`script`标签     if (scriptPath &amp;&amp; !/&lt;script[\s\S]*?&gt;/.test(source)) {         const extName = scriptPath.split(".").pop();         if (extName) {             const content = await readFile(scriptPath, "utf8");             const scriptTagContent = [                 "&lt;script ",                 extName === "js" ? "" : `lang="${extName}" `,                 "&gt;\n",                 content,                 "&lt;/script&gt;",             ].join("");             source = source + "\n" + scriptTagContent;         }     }      // 存在匹配节点且原`.vue`文件不存在`style`标签     if (stylePath &amp;&amp; !/&lt;style[\s\S]*?&gt;/.test(source)) {         const extName = stylePath.split(".").pop();         if (extName) {             const content = await readFile(stylePath, "utf8");             const scoped = /\/\/[\s]scoped[\n]/.test(content) ? true : false;             const styleTagContent = [                 "&lt;style ",                 extName === "css" ? "" : `lang="${extName}" `,                 scoped ? "scoped " : " ",                 "&gt;\n",                 content,                 "&lt;/style&gt;",             ].join("");             source = source + "\n" + styleTagContent;         }     }      // console.log(stylePath, scriptPath, source);     done(null, source); }; </code></pre> <h2 id="每日一题">每日一题</h2> <pre><code>https://github.com/WindrunnerMax/EveryDay </code></pre> <h2 id="参考">参考</h2> <pre><code>https://webpack.js.org/api/loaders/ https://juejin.cn/post/6844904054393405453 https://segmentfault.com/a/1190000014685887 https://segmentfault.com/a/1190000021657031 https://webpack.js.org/concepts/loaders/#inline http://t.zoukankan.com/hanshuai-p-11287231.html https://v2.vuejs.org/v2/guide/single-file-components.html </code></pre> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-53662.htm">Nodejs对数据库的增删改查</a></p>
                                        <p>下一个：<a href="/news/article-54198.htm">利用Nginx实现URL重定向的简单方法_nginx_</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-43499.htm" title="动物疫苗上市企业排名前十 动物疫苗上市企业排名前十有哪些">动物疫苗上市企业排名前十 动物疫苗上市企业排名前十有哪些</a></li>
                        <li class="py-2"><a href="/news/article-49976.htm" title="动物疫苗多少钱打一针（动物疫苗多少钱一针?）">动物疫苗多少钱打一针（动物疫苗多少钱一针?）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-8-free-ssr-subscribe.htm" title="1月8日|最高速度18.9M/S，2025最新ClashVerge免费节点高速订阅链接">1月8日|最高速度18.9M/S，2025最新ClashVerge免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-58459.htm" title="Golang学习之网络参数请求-Query Params及Path Variables的区别及底层实现">Golang学习之网络参数请求-Query Params及Path Variables的区别及底层实现</a></li>
                        <li class="py-2"><a href="/news/article-43980.htm" title="宠物粮食在哪里进货好卖呢视频（宠物粮进货平台）">宠物粮食在哪里进货好卖呢视频（宠物粮进货平台）</a></li>
                        <li class="py-2"><a href="/news/article-55301.htm" title="vue中巧用三元表达式解析_vue.js">vue中巧用三元表达式解析_vue.js</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-24-free-ssr-node.htm" title="2月24日|最高速度19.9M/S，2025最新ClashVerge免费节点高速订阅链接">2月24日|最高速度19.9M/S，2025最新ClashVerge免费节点高速订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-43001.htm" title="合肥 宠物领养 合肥宠物领养中心">合肥 宠物领养 合肥宠物领养中心</a></li>
                        <li class="py-2"><a href="/news/article-45480.htm" title="SpringCloud 服务调用监控 Hystrix Dashboard、Turbine">SpringCloud 服务调用监控 Hystrix Dashboard、Turbine</a></li>
                        <li class="py-2"><a href="/news/article-37075.htm" title="DjangoRestFramework框架三种分页功能的实现 &#8211; 在DjangoStarter项目模板中封装">DjangoRestFramework框架三种分页功能的实现 &#8211; 在DjangoStarter项目模板中封装</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </section>
    <!-- ========================= about-section end ========================= -->
        <!-- ========================= footer start ========================= -->
    <footer class="footer">
        <div class="container">
            <div class="copy-right">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p>
                    ClashVergeNode节点订阅站 版权所有
                    <br />
                    Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- ========================= footer end ========================= -->
    <!-- ========================= JS here ========================= -->
    <script src="/assets/website/js/frontend/clashvergenode/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/bootstrap-5.0.0-beta2.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/count-up.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/wow.min.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/polifill.js"></script>
    <script src="/assets/website/js/frontend/clashvergenode/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>